Міністерство освіти і науки України
Харківський національний університет радіоелектроніки


Кафедра програмної інженерії



Звіт
з практичної роботи №2
з дисципліни «Аналіз та рефакторинг коду»
з теми: «Методи рефакторингу коду програмного забезпечення»





Виконав 								Перевірив
ст. гр. ПЗПІ-22-7 							доц. Сокорчук І. П.
Голоха Н. Е.








2025 рік
     1 ОСНОВНІ РЕКОМЕНДАЦІЇ ЗАСТОСУВАННЯ МЕТОДІВ РЕФАКТОРИНГУ КОДУ ПРОГРАМНОГО ЗАБЕЗПЕЧЕННЯ
     
     1.1 Мета роботи 
     
     Ознайомитися з різноманітними методами рефакторингу коду, проаналізувати їхні сильні та слабкі сторони, а також показати, як вони застосовуються на практичних прикладах задля підвищення якості, продуктивності та зручності у супроводі програмного забезпечення.
     
1.2  Хід роботи 
     
1. Обрано три методи рефакторингу з книги Мартіна Фаулера «Refactoring: Improving the Design of Existing Code», а саме: Introduce Null Object, Hide Method та Extract Subclass.
2. Підготовлено приклади коду для демонстрації застосування обраних методів рефакторингу.
3. Створено презентацію (див. дод. А), у якій висвітлено такі ключові аспекти:
− Introduce Null Object – використання «порожнього» об’єкта замість null для уникнення зайвих перевірок і підвищення читабельності;
− Hide Method – приховування внутрішніх методів з метою зменшення публічного інтерфейсу та спрощення інкапсуляції;
− Extract Subclass – винесення певної логіки в окремий підклас, щоб поліпшити розподіл відповідальностей і зробити код гнучкішим;
− різноманітні інструменти, які полегшують процес рефакторингу та допомагають автоматизувати рутинні перевірки.
     
     4. Оформлено звіт до практичного заняття.
     
     1.3 Висновок
     
     У процесі роботи було ґрунтовно проаналізовано й випробувано різні методи рефакторингу, які сприяють покращенню структури та якості коду.
     Завдяки Remove Control Flag вдалося спростити логіку за рахунок усунення контрольних прапорів, що зменшило рівень вкладеності умовних конструкцій і зробило код прозорішим та легшим у зміні.
     Метод Replace Array with Object забезпечив наочнішу структуру даних, замінюючи масиви об’єктами, що не лише підвищило самодокументованість коду, а й знизило ймовірність помилок, пов’язаних із некоректним доступом до індексів.
     Remove Assignments to Parameter допоміг зберегти незмінність параметрів під час виконання методу, посиливши передбачуваність і спростивши подальшу підтримку.
     Загалом рефакторинг забезпечує високу якість програмного коду, покращуючи його читабельність, масштабованість і надійність. Регулярне застосування цих прийомів дозволяє уникати накопичення технічного боргу й підтримувати проєкт у стабільному стані, особливо при впровадженні нових функцій чи виправленні помилок.
     
     Посилання на файл з кодом в GitHub репозиторії:
     …
     
     Посилання на YouTube відео з презентацією:
     …
ДОДАТОК А
Слайди презентації


Рисунок А.1 –Титульний слайд презентації


Рисунок А.2 – Слайд зі змістом презентації

Рисунок А.3 – Слайд з описом мети рефакторингу


Рисунок А.4 –Слайд з описом обраних методів рефакторингу
Рисунок А.5 – Слайд з описом методу рефакторингу Introduce Null Object

Рисунок А.6 – Слайд з прикладом коду до і після застосування методу Introduce Null Object
Рисунок А.7 – Слайд з описом методу рефакторингу Hide Method

Рисунок А.8 – Слайд з прикладом коду до і після застосування методу Hide MethodРисунок А.9 – Слайд з описом методу рефакторингу Extract Subclass

Рисунок А.10 – Слайд з прикладом коду до і після застосування методу Extract SubclassРисунок А.11 – Слайд з переліком інструментів для рефакторингу
 
Рисунок А.12 – Слайд з висновками
Рисунок А.13 –Слайд з переліком використаних джерел



2


