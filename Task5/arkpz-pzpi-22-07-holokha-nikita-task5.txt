Міністерство освіти і науки України
Харківський національний університет радіоелектроніки


Кафедра програмної інженерії



Звіт
з лабораторної роботи №5
з дисципліни «Аналіз та рефакторинг коду»
з теми: «Розгортання програмної системи та демонстрація її роботи»





Виконав 								Перевірив
ст. гр. ПЗПІ-22-7 							доц. Сокорчук І. П.
Рубаненко М. С.








2024 рік
     1 РОЗГОРТАННЯ ПРОГРАМНОЇ СИСТЕМИ ТА ДЕМОНСТРАЦІЯ ЇЇ РОБОТИ
     1.1 Мета роботи


     Ознайомитися з процесом розгортання програмної системи, включаючи налаштування серверного середовища, ініціалізацію та запуск бази даних, а також інтеграцію емулятора IoT для взаємодії з бекендом.
     
     1.2 Вимоги до середовища для розгортання програмної системи

     
     Для коректного розгортання програмної системи необхідно дотримуватися певних технічних вимог. Основною платформою для роботи може бути операційна система Windows, macOS або Linux із встановленим інтерпретатором Python версії 3.9 або новішої, який можна завантажити з офіційного сайту.
     Для ізоляції залежностей проєкту рекомендується використовувати віртуальне середовище Python за допомогою модуля venv. Як основна система керування базами даних (СУБД) використовується PostgreSQL, яка повинна бути попередньо встановлена разом із необхідними розширеннями. Для зручного адміністрування бази даних можна використовувати pgAdmin або інші клієнти для роботи з PostgreSQL.
     Необхідні пакети Python, такі як Flask, SQLAlchemy, psycopg2 та інші, що зазначені у файлі requirements.txt, мають бути встановлені через pip. Оскільки система взаємодіє з IoT-пристроями та веб-сервісами, необхідно забезпечити стабільне мережеве підключення для доступу до API та зовнішніх ресурсів.
     Для стабільної роботи система потребує пристрою з мінімум 2 ГБ оперативної пам'яті, процесором із тактовою частотою не менше 2 ГГц та щонайменше 10 ГБ вільного місця на диску для зберігання файлів проєкту, бібліотек Python і бази даних. Це забезпечить швидке виконання запитів та належну продуктивність.
     Дотримання цих вимог дозволить успішно розгорнути програмну систему та забезпечити її стабільне функціонування на обраному обладнанні.
     
     
     1.3 Розгортання серверної частини системи

     
	Розгортання програмної системи включає кілька етапів, що забезпечують правильну підготовку серверної частини та емулятора IoT.
	Спочатку потрібно завантажити архів із вихідним кодом проєкту та розпакувати його у вибрану директорію. Далі слід відкрити термінал або командний рядок і перейти до кореневої директорії проєкту.
	Для ізоляції залежностей необхідно створити віртуальне середовище, яке дозволить уникнути конфліктів між бібліотеками. Після створення віртуального середовища його потрібно активувати відповідно до використовуваної операційної системи.
	Наступним кроком є встановлення всіх необхідних залежностей, зазначених у файлі конфігурації проєкту. Це забезпечить коректну роботу програмної системи.
	Після цього потрібно створити файл конфігурації .env, де вказуються параметри підключення до бази даних, ключі доступу та інші важливі змінні середовища.
	Виконання цих кроків дозволить підготувати середовище для подальшого запуску та роботи програмної системи.


     Для запуску серверу Flask виконується команда flask run Після запуску сервер стає доступним за адресою http://127.0.0.1:5000. 
     
     	
     1.4 Розгортання IoT-емулятора


     Архів із програмним кодом емулятора IoT-датчиків розпаковується в окрему директорію. Для налаштування необхідно перейти до цієї директорії у терміналі, створити віртуальне середовище, активувати його та встановити необхідні залежності так само, як і для серверної частини.
     Після налаштування середовища емулятор IoT запускається виконанням коду на мікроконтролері, який зчитує дані з датчиків температури, вологості, освітленості та вологості ґрунту. Для початку роботи потрібно підключити пристрій до мережі WiFi та забезпечити коректну відправку даних на сервер.
     Для запуску та тестування в середовищі Wokwi або на фізичному пристрої використовується відповідний інструмент компіляції та прошивки, після чого код починає виконуватися автоматично.








     1.5 Конфігурація та створення бази даних
     Розгортання бази даних у PostgreSQL у проєкті, який використовує Flask та SQLAlchemy, передбачає кілька основних етапів. Спочатку необхідно запустити сервер PostgreSQL та створити нову базу даних. Це можна зробити через pgAdmin або термінальною командою CREATE DATABASE database_name;, де database_name – це ім'я створеної бази. Далі у файлі конфігурації проєкту, наприклад .env, потрібно вказати рядок підключення у форматі DATABASE_URL=postgresql://postgres:password@localhost:5432/database_name, замінивши відповідні параметри доступу.
     Після налаштування підключення слід ініціалізувати базу даних і створити необхідні таблиці. Якщо в проєкті використовується Flask-Migrate, потрібно виконати команди flask db init, flask db migrate -m "Initial migration" та flask db upgrade. Це створить файли міграцій та застосує їх до бази даних. Якщо Flask-Migrate не використовується, створення таблиць можна виконати вручну, викликавши у коді db.create_all().
     Після завершення ініціалізації бази потрібно перевірити її коректність, переглянувши створені таблиці через pgAdmin або за допомогою команди \dt у psql. Запуск застосунку здійснюється командою flask run або python run.py, що забезпечує взаємодію застосунку з базою через SQLAlchemy. Дотримання цієї послідовності кроків гарантує правильне налаштування бази даних і готовність системи до роботи.


     1.6 Висновки
     
     
     У ході виконання роботи було успішно розгорнуто програмну систему, що включає три основні компоненти: серверний бекенд, базу даних PostgreSQL та IoT-клієнт для моніторингу стану рослин. Виконані налаштування дозволили створити повноцінну інфраструктуру, придатну для тестування, демонстрації та подальшого використання системи. У процесі роботи було закріплено навички роботи з реляційною базою даних PostgreSQL, використання SQLAlchemy для взаємодії з нею, а також принципи створення та керування віртуальним середовищем у Python. Було реалізовано налаштування конфігураційних файлів, їхню взаємодію із серверною частиною додатку та забезпечено коректну комунікацію між IoT-клієнтом і сервером для збору та обробки даних із сенсорів.






2


