Міністерство освіти і науки України
Харківський національний університет радіоелектроніки


Кафедра програмної інженерії



Звіт
з лабораторної роботи №2
з дисципліни «Аналіз та рефакторинг коду»
з теми: «Розробка бази даних для серверної частини програмної системи та прикладного програмного інтерфейсу (АРІ)»





Виконав 								Перевірив
ст. гр. ПЗПІ-22-7 							доц. Сокорчук І. П.
Голоха Н. Е.








2024 рік
     РОЗРОБКА БАЗИ ДАНИХ ДЛЯ СЕРВЕРНОЇ ЧАСТИНИ ПРОГРАМНОЇ СИСТЕМИ
     1.1 Мета роботи


     Розробити базу даних для серверної частини  програмної системи та прикладного програмного інтерфейсу. 

     
     1.2 Розробка будови програмної системи


     Розроблена будова для програмної системи «Платформа для догляду за рослинами вдома».

     1.3 Створення UML діаграми
     
     
     Діаграма моделює функціонал інформаційної системи для управління платформою для догляду за рослинами рис.1.1. Система орієнтована на координацію дій між кількома групами користувачів: юзер, система автоматизації, система сповіщень, сенсори, системний адміністратор. 

     Рисунок 1.1 – UML -діаграма інформаційної системи «Платформа для догляду за рослинами вдома»

     Всі групи користувачів мають чітко визначені ролі та завдання, які підтримуються через взаємодію з системою:

     1. Юзер (User)
     1. Реєстрація та вхід у систему.
     2. Додавання рослин до системи.
     3. Перегляд стану рослин через платформу.
     4. Отримання сповіщень про необхідний догляд за рослинами.
     5. Аналіз даних про стан рослин.
     2. IoT Сенсор (IoT Sensor)
     1. Збір даних про стан навколишнього середовища (температура, вологість повітря, рівень освітлення, вологість ґрунту).
     2. Надсилання отриманих даних у систему для обробки.
     3. Система автоматизації (Automation System)
     1. Виконання автоматичних дій на основі отриманих даних (полив, налаштування освітлення).
     2. Надсилання сповіщень у систему у разі необхідності втручання користувача.
     4. Система сповіщень (Notification System)
     1. Генерація повідомлень для користувача про необхідність догляду за рослинами.
     2. Надсилання повідомлень через систему або мобільний додаток.
     5. Системний адміністратор (System Administrator)
     1. Обслуговування системи.
     2. Виправлення критичних помилок у роботі сервісу.
     3. Контроль працездатності серверної частини та інтеграції з IoT-пристроями.

     Система догляду за рослинами починається з процесу реєстрації в системі, що є обов’язковим для всіх типів користувачів. Кожен користувач, який хоче отримати доступ до функціоналу, повинен створити обліковий запис. Процес реєстрації може включати вибір типу користувача, наприклад, звичайний користувач або адміністратор системи. Після реєстрації кожен користувач проходить автентифікацію, здійснюючи вхід у систему за допомогою логіна і пароля.
     Однією з основних функцій системи є управління рослинами, які додані користувачами. Користувач може додати нову рослину до свого списку, вказавши її назву, тип, розташування у приміщенні та встановивши параметри догляду. Додані рослини можна редагувати, змінюючи їх параметри, або видаляти у разі потреби.
     Ключовою функцією системи є моніторинг стану рослин у реальному часі. Для цього використовуються сенсори, які збирають дані про температуру, вологість ґрунту, рівень освітленості та інші параметри. Дані із сенсорів передаються у систему, де користувач може переглядати поточний стан своїх рослин у вигляді таблиць, графіків або сповіщень.
     Система підтримує функцію автоматизованого догляду, що включає розклад поливу, внесення добрив та інші заходи догляду. Користувач може самостійно налаштовувати параметри догляду або покладатися на автоматичні рекомендації системи, що базуються на типі рослини та показниках сенсорів.
     Система аналізує отримані від сенсорів дані та порівнює їх із встановленими пороговими значеннями. У разі виявлення відхилень від норми система може:
     * Надіслати сповіщення користувачу про необхідність поливу, підживлення чи зміну умов утримання.
     * Активувати автоматичну систему поливу (якщо пристрій підтримує цю функцію).
     * Запропонувати зміну місця розташування рослини або інші коригувальні заходи.
     Користувач має доступ до історії догляду за рослинами, що включає дати поливу, внесення добрив, обрізки та інших дій. Це дозволяє відстежувати ефективність догляду та аналізувати зміни у стані рослини.
     Система підтримує підключення розумних пристроїв для моніторингу та догляду за рослинами. Користувач може додавати сенсори та керувати їхніми параметрами, змінювати порогові значення та переглядати історію вимірювань.
     Користувач може змінювати налаштування профілю, такі як мова інтерфейсу, сповіщення, режим роботи (автоматичний або ручний). Адміністратори системи мають розширений доступ до керування даними користувачів та пристроїв.
     Для користувачів, які ведуть догляд за великою кількістю рослин (наприклад, у теплицях або ботанічних садах), система надає статистичні звіти про стан рослин, рівень вологи, температуру та ефективність догляду.
     Система "Платформа для догляду за рослинами" автоматизує процес догляду, дозволяючи користувачам ефективно контролювати стан рослин через сенсори, автоматичний полив та сповіщення про відхилення у параметрах навколишнього середовища. Це допомагає зменшити ризик загибелі рослин через неправильний догляд та забезпечує оптимальні умови для їхнього росту.
     
     1.4 Створення ER діаграми даних
     
     Перед початком розробки бази даних для платформи догляду за рослинами було створено ER-діаграму, що відображає основні сутності та їхні взаємозв’язки (Рис. 1.2).
     Основні сутності:
     1. User (Користувач)
(user_id, name, email, password, created_at)
     * Зберігає інформацію про користувачів платформи.
     * Взаємодіє з рослинами, отримує сповіщення, використовує пристрої автоматизації.
     2. UserSettings (Налаштування користувача)
(user_settings_id, user_id, notification_preferences, language, timezone)
     * Визначає особисті налаштування, включаючи мову, часовий пояс та сповіщення.
     3. Plant (Рослина)
(plant_id, user_id, plant_type_id, name, nickname, added_at)
     * Зберігає інформацію про рослини, що додані користувачем.
     * Взаємодіє з сенсорами, історією догляду та пороговими значеннями.
     4. PlantCatalog (Каталог рослин)
(plant_type_id, name, recommended_temperature_range, recommended_humidity_range, watering_frequency, description)
     * Містить довідкову інформацію про рослини, включаючи рекомендовані умови догляду.
     5. Sensor (Сенсор)
(sensor_id, plant_id, sensor_type, location)
     * Відповідає за збір даних щодо стану рослин (температура, вологість, освітлення тощо).
     6. SensorData (Дані сенсорів)
(sensor_data_id, sensor_id, measurement_value, measurement_time)
     * Зберігає історію вимірювань, отриманих від сенсорів.
     7. Threshold (Порогові значення)
(threshold_id, sensor_id, parameter, name, min_value, max_value, severity, is_active)
     * Визначає межі допустимих значень параметрів (наприклад, мінімальна та максимальна вологість).
     8. Device (Пристрій автоматизації)
(device_id, user_id, threshold_id, schedule_id, nickname, device_type, comment)
     * Контролює автоматизовані пристрої, такі як системи поливу або освітлення.
     9. Schedule (Розклад дій)
(schedule_id, user_id, cron_expression, action_type (if needed), is_active)
     * Дозволяє користувачам налаштовувати автоматичні дії за певним графіком.
     10. PlantCareHistory (Історія догляду за рослиною)
(care_action_id, plant_id, action_type, action_ts, comment)
     * Фіксує всі дії користувача щодо догляду за рослиною (полив, добриво, пересадка тощо).
     11. Notification (Сповіщення)
(notification_id, user_id, message, created_at, is_processed)
     * Надсилає користувачам повідомлення про важливі події (низький рівень вологи, нагадування про догляд).
     Основні зв’язки між сутностями:
     * User → UserSettings (один-до-одного): Кожен користувач має власні налаштування системи.
     * User → Plant (один-до-багатьох): Один користувач може мати багато рослин у системі.
     * Plant → Sensor (один-до-багатьох): Кожна рослина може мати кілька сенсорів для моніторингу.
     * Sensor → SensorData (один-до-багатьох): Кожен сенсор записує багато вимірювань у таблицю даних.
     * Sensor → Threshold (один-до-багатьох): Кожен сенсор може мати встановлені порогові значення.
     * User → Device (один-до-багатьох): Користувач може мати декілька пристроїв автоматизації.
     * Schedule → Device (один-до-одного або один-до-багатьох): Один розклад може бути пов’язаний з декількома пристроями.
     * Plant → PlantCareHistory (один-до-багатьох): Кожна рослина має історію взаємодій.
     * User → Notification (один-до-багатьох): Користувач отримує різні повідомлення про стан системи.
     

     Рисунок 1.2 – ER-діаграма інформаційної системи «Платформа для догляду за рослинами»

a. 1.5	Побудова логічної моделі бази даних на основі ER-діаграми


     	Проектування логічної моделі бази даних для платформи догляду за рослинами передбачає використання реляційної моделі, яка є оптимальним рішенням для цієї предметної області. Ця модель забезпечує ефективне зберігання, обробку та аналіз структурованих даних, таких як інформація про користувачів, рослини, сенсори, пристрої автоматизації, сповіщення та історію догляду.
     Після аналізу ER-діаграми, було розроблено схему реляційної бази даних, що складається з чотирнадцяти таблиць. Для іменування таблиць та їх атрибутів використана англійська мова.
     	1) Таблиця user (Користувачі)
     • user_id – ідентифікатор користувача.
     • name – ім'я користувача.
     • email – електронна пошта.
     • password – пароль.
     • created_at – дата створення облікового запису.
     2) Таблиця user_settings (Налаштування користувачів)
     • user_settings_id – ідентифікатор налаштувань.
     • user_id – ідентифікатор користувача.
     • notification_preferences – налаштування сповіщень.
     • language – мова інтерфейсу.
     • timezone – часовий пояс.
     3) Таблиця plant (Рослини)
     • plant_id – ідентифікатор рослини.
     • user_id – ідентифікатор власника рослини.
     • plant_type_id – ідентифікатор типу рослини.
     • name – назва рослини.
     • nickname – псевдонім або особиста назва рослини.
     • added_at – дата додавання рослини в систему.
     4) Таблиця plant_catalog (Каталог рослин)
     • plant_type_id – ідентифікатор типу рослини.
     • name – назва рослини.
     • recommended_temperature_range – рекомендований температурний діапазон.
     • recommended_humidity_range – рекомендований рівень вологості.
     • watering_frequency – частота поливу.
     • description – опис виду рослин.
     5) Таблиця sensor (Сенсори)
     • sensor_id – ідентифікатор сенсора.
     • plant_id – ідентифікатор рослини, яку контролює сенсор.
     • sensor_type – тип сенсора (вологість, температура, світло тощо).
     • location – розташування сенсора (наприклад, біля коріння, на листі).
     6) Таблиця sensor_data (Дані сенсорів)
     • sensor_data_id – ідентифікатор запису даних сенсора.
     • sensor_id – ідентифікатор сенсора.
     • measurement_value – значення вимірювання (наприклад, % вологості).
     • measurement_time – час отримання даних.
     7) Таблиця threshold (Порогові значення для сенсорів)
     • threshold_id – ідентифікатор порогу.
     • sensor_id – ідентифікатор сенсора.
     • parameter – тип параметра (температура, вологість тощо).
     • name – назва порогового значення.
     • min_value – мінімальне допустиме значення.
     • max_value – максимальне допустиме значення.
     • severity – рівень критичності.
     • is_active – статус активності порогового значення.
     8) Таблиця device (Пристрої автоматизації)
     • device_id – ідентифікатор пристрою.
     • user_id – ідентифікатор власника пристрою.
     • threshold_id – ідентифікатор порогу, при якому пристрій активується.
     • schedule_id – ідентифікатор розкладу дій пристрою.
     • nickname – псевдонім пристрою.
     • device_type – тип пристрою (поливальна система, освітлення тощо).
     • comment – додатковий опис або примітки.
     9) Таблиця schedule (Розклад дій)
     • schedule_id – ідентифікатор розкладу.
     • user_id – ідентифікатор користувача.
     • cron_expression – вираз CRON для налаштування періодичних дій.
     • action_type (if needed) – тип автоматизованої дії (наприклад, включити полив).
     • is_active – статус активності розкладу.
     10) Таблиця plant_care_history (Історія догляду за рослиною)
     • care_action_id – ідентифікатор дії догляду.
     • plant_id – ідентифікатор рослини.
     • action_type – тип дії (полив, добриво, пересадка тощо).
     • action_ts – час виконання дії.
     • comment – примітка або опис дії.
     11) Таблиця notification (Сповіщення)
     • notification_id – ідентифікатор сповіщення.
     • user_id – ідентифікатор користувача.
     • message – текст повідомлення.
     • created_at – дата та час створення повідомлення.
     • is_processed – статус обробки сповіщення.
b. 1.6	Розробка функції роботи з БД 


     Розробка функцій роботи з базою даних здійснювалася з використанням ORM, зокрема бібліотеки SQLAlchemy, яка є однією з найпопулярніших у Python. ORM (Object-Relational Mapping) — це підхід, що дозволяє працювати з базою даних через об’єкти мови програмування, замість написання сирих SQL-запитів. У цьому випадку таблиці бази даних представляються у вигляді класів Python, де кожна колонка таблиці відповідає атрибуту класу. SQLAlchemy забезпечує автоматичне перетворення даних між об’єктами та записами бази, що спрощує процес взаємодії з даними.
     У SQLAlchemy використовується мапінг, завдяки якому класи Python зв’язуються з таблицями бази даних. Для виконання CRUD-операцій використовується транзакційна модель через спеціальні сесії. Це дозволяє працювати з даними у рамках чітко визначених транзакцій, забезпечуючи цілісність і безпеку інформації.
     У системі моніторингу рослин таблиця SensorData використовується для зберігання даних, отриманих із сенсорів, що вимірюють параметри навколишнього середовища. Кожен запис у таблиці містить значення вимірювання, час запису та ідентифікатор сенсора, який його надав.
     Нижче наведено реалізацію моделі SensorData у SQLAlchemy, що представляє таблицю sensor_data в базі даних:
     
from app import db
from sqlalchemy import Column, Integer, Float, ForeignKey, DateTime
from datetime import datetime
from app.responses.sensor_data_response import SensorDataResponse
from app.utils.error_handler import ErrorHandler

class SensorData(db.Model):
    __tablename__ = "sensor_data"

    sensor_data_id = Column(Integer, primary_key=True)
    sensor_id = Column(Integer, ForeignKey('sensor.sensor_id'), nullable=False)
    measurement_value = Column(Float, nullable=False)
    measurement_time = Column(DateTime, default=datetime.utcnow)

     Для виконання основних операцій CRUD створені статичні методи у класі SensorData. Ось приклад функції для додавання нового запису у таблицю вимірювань:
       @staticmethod
           def add_sensor_data(data):
               try:
                   new_sensor_data = SensorData(
                       sensor_id=data.get("sensor_id"),
                       measurement_value=data.get("measurement_value"),
                       measurement_time=data.get("measurement_time", datetime.utcnow()) 
                   )
                   db.session.add(new_sensor_data)
                   db.session.commit()
                   return {"message": "Sensor data added successfully"}, 201
               except Exception as e:
                   db.session.rollback()
                   return ErrorHandler.handle_error(e, "Failed to add sensor data", 500)
       
     
c. 1.7	Розробка REST API для взаємодії серверної частини з клієнтами.


Для розробки взаємодії серверної частини з клієнтами було обрано REST, це архітектурний стиль для створення API, який використовує протокол HTTP для обміну даними між клієнтом і сервером. Основною ідеєю REST є забезпечення уніфікованого інтерфейсу для взаємодії з ресурсами, які можна ідентифікувати через унікальні URL-адреси. Ресурси в REST API є різними об'єктами або даними, такими як користувачі, замовлення або доставки, і з ними можна працювати через різні HTTP-методи.
У процесі розробки API було застосовано принципи REST, що включають використання стандартних HTTP-методів: GET для отримання даних, POST для створення нових ресурсів, PUT для оновлення існуючих, і DELETE для видалення ресурсів рис.1.4. 

Рисунок  1.3 – Приклад використання стандартних HTTP-методів

Кожен запит API супроводжується відповідним статусом HTTP, що вказує на успішність або помилку операції, наприклад, статуси 200 OK, 404 Not Found, або 500 Internal Server Error рис.1.5 – 1.6. 

Рисунок 1.4  – Приклад отримання статусу 200 


Рисунок  1.5 – Приклад отримання статусу 500

     Розроблений API організовано навколо ресурсів, для яких визначено унікальні ендпоінти для виконання CRUD-операцій. Наприклад, ендпоінт GET /users дозволяє отримати список юзерів рис.1.6, а POST /users— дозволяє зареєструвати нового юера у системі рис.1.7. 
     

     Рисунок  1.7 – Приклад GET запиту
     

     Рисунок  1.8 – Приклад POST запиту
     
     Також було забезпечено відловлювання та обробку помилок, які можуть бути отримані під час введення користувачами некоректних даних, наприклад спроба записати в колону значення невірного типу буде супроводжуватися статусом 500 і відповідним повідомленням рис.1.8.
     
     Рисунок  1.9 – Приклад обробки помилки
     
d. 1.8	Специфікація розробленого API

Маршрути, створені для роботи з платформою догляду за рослинами
	1. Каталог рослин (Plant Catalog)
     * GET /plant_catalog – Повертає список усіх рослин у каталозі.
     * GET /plant_catalog/<int:plant_type_id> – Отримати детальну інформацію про конкретну рослину в каталозі.
     * POST /plant_catalog – Додає нову рослину (name, recommended_temperature_range, recommended_humidity_range, watering_frequency, description).
     * PUT /plant_catalog/<int:plant_type_id> – Оновлює інформацію про рослину в каталозі.
     * DELETE /plant_catalog/<int:plant_type_id> – Видаляє рослину з каталогу.
     2. Рослини користувачів (Plants)
     * GET /plants – Отримати список усіх рослин, доданих користувачами.
     * GET /plant/<int:plant_id> – Отримати інформацію про конкретну рослину.
     * POST /plants – Додає нову рослину (user_id, plant_type_id, nickname, location).
     * PUT /plant/<int:plant_id> – Оновлює інформацію про рослину.
     * DELETE /plant/<int:plant_id> – Видаляє рослину користувача.
     3. Догляд за рослинами (Plant Care History)
     * GET /plant_care_history – Отримати всю історію догляду за рослинами.
     * GET /plant_care_history/<int:plant_id> – Отримати історію догляду за конкретною рослиною.
     * POST /plant_care_history – Додає запис про догляд (plant_id, action_type, comment).
     4. Сенсори (Sensors)
     * GET /sensors – Отримати список усіх сенсорів.
     * GET /sensors/<int:sensor_id> – Отримати інформацію про конкретний сенсор.
     * POST /sensors – Додає новий сенсор (device_id, sensor_type, location, min_threshold, max_threshold).
     * PUT /sensors/<int:sensor_id> – Оновлює інформацію про сенсор.
     * DELETE /sensors/<int:sensor_id> – Видаляє сенсор.
     5. Дані сенсорів (Sensor Data)
     * GET /sensor_data/<int:sensor_id> – Отримати всі вимірювання для конкретного сенсора.
     * POST /sensor_data – Додає нове вимірювання (sensor_id, measurement_value).
     6. Порогові значення (Thresholds)
     * GET /thresholds – Отримати список усіх порогових значень.
     * GET /thresholds/<int:threshold_id> – Отримати інформацію про конкретне порогове значення.
     * POST /thresholds – Додає нове порогове значення (sensor_id, parameter, name, min_value, max_value, severity, is_active).
     * PUT /thresholds/<int:threshold_id> – Оновлює порогове значення.
     * DELETE /thresholds/<int:threshold_id> – Видаляє порогове значення.
     7. Розклад (Schedule)
     * GET /schedule – Отримати список усіх запланованих дій.
     * GET /schedule/<int:schedule_id> – Отримати інформацію про конкретну заплановану дію.
     * POST /schedule – Додає нову дію (plant_id, action, scheduled_time).
     * PUT /schedule/<int:schedule_id> – Оновлює заплановану дію.
     * DELETE /schedule/<int:schedule_id> – Видаляє заплановану дію.
     8. Повідомлення (Notifications)
     * GET /notifications – Отримати список усіх сповіщень.
     * GET /notifications/<int:user_id> – Отримати сповіщення для конкретного користувача.
     * POST /notifications – Додає нове сповіщення (user_id, message, status).
     * PUT /notifications/<int:notification_id> – Оновлює статус сповіщення.
     * DELETE /notifications/<int:notification_id> – Видаляє сповіщення.
     9. Налаштування користувача (User Settings)
     * GET /user_settings – Отримати список усіх налаштувань користувачів.
     * GET /user_settings/<int:user_id> – Отримати налаштування конкретного користувача.
     * POST /user_settings – Додає налаштування користувача (user_id, notifications_enabled, preferred_language, dark_mode).
     * PUT /user_settings/<int:user_id> – Оновлює налаштування користувача.
     * DELETE /user_settings/<int:user_id> – Видаляє налаштування користувача.
     10. Користувачі (Users)
     * GET /users – Отримати список усіх користувачів.
     * GET /users/<int:user_id> – Отримати інформацію про конкретного користувача.
     * POST /users – Додає нового користувача (name, email, password).
     * PUT /users/<int:user_id> – Оновити інформацію про користувача.
     * DELETE /users/<int:user_id> – Видалити користувача.
     11. Пристрої (Devices)
     * GET /devices – Отримати список усіх пристроїв.
     * GET /devices/<int:device_id> – Отримати інформацію про конкретний пристрій.
     * POST /devices – Додати новий пристрій (user_id, device_type, status).
     * PUT /devices/<int:device_id> – Оновити інформацію про пристрій.
     * DELETE /devices/<int:device_id> – Видалити пристрій.

Посилання на файл з кодом в GitHub репозиторії:
https://github.com/NureHolokhaNikita/arkpz-pzpi-22-7-holokha-nikita
Посилання на YouTube відео з презентацією:
https://youtu.be/j2j9zy3jqvE
2


